// Hebrew Translation for GoHighLevel
(function() {
  // Dictionary - English to Hebrew
  const translations = {
    " Dashboard ": "דאשבורד",
    " Conversations ": "שיחות",
    " Calendars ": "לוחות שנה",
    " Contacts ": "אנשי קשר",
    " Opportunities ": "הזדמנויות",
    " Payments ": "תשלומים",
    "Save": "שמור",
    "Search": "חיפוש",
    "Delete": "מחק",
    "Yes": "כן",
    "No": "לא",
    "Cancel": "ביטול",
    "Add": "הוסף"
    // אתה יכול להוסיף עוד מילים לפי הצורך
  };
  
  // Function to translate text
  function translateText(text) {
    if (!text || typeof text !== "string") return text;
    
    let result = text;
    for (const [eng, heb] of Object.entries(translations)) {
      if (result.includes(eng)) {
        result = result.replace(new RegExp(eng.replace(/[-\\^$*+?.()|[\]{}]/g, "\\$&"), "g"), heb);
      }
    }
    return result;
  }
  
  // Function to translate page
  function translatePage() {
    if (!document || !document.body) return;
    
    const walker = document.createTreeWalker(
      document.body,
      NodeFilter.SHOW_TEXT,
      { acceptNode: node => {
          if (node.nodeType !== Node.TEXT_NODE) return NodeFilter.FILTER_REJECT;
          if (!node.nodeValue || !node.nodeValue.trim()) return NodeFilter.FILTER_REJECT;
          if (["SCRIPT", "STYLE"].includes(node.parentNode.nodeName)) return NodeFilter.FILTER_REJECT;
          return NodeFilter.FILTER_ACCEPT;
        }
      }
    );
    
    const textNodes = [];
    let currentNode;
    while (currentNode = walker.nextNode()) {
      textNodes.push(currentNode);
    }
    
    textNodes.forEach(node => {
      const originalText = node.nodeValue;
      const translatedText = translateText(originalText);
      if (translatedText !== originalText) {
        node.nodeValue = translatedText;
      }
    });
  }
  
  // Monitor changes
  function observeChanges() {
    if (!window.MutationObserver) return;
    
    const observer = new MutationObserver(() => {
      setTimeout(translatePage, 100);
    });
    
    observer.observe(document.body, {
      childList: true,
      subtree: true,
      characterData: true
    });
  }
  
  // Initial translation
  if (document.readyState === "complete") {
    translatePage();
    observeChanges();
  } else {
    window.addEventListener("load", () => {
      translatePage();
      observeChanges();
    });
  }
  
  // Run translation anyway after a delay
  setTimeout(() => {
    translatePage();
    observeChanges();
  }, 1000);
})();
